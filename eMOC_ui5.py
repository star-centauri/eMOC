# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eMOC.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1054, 604)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("logo_emoc.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(38, 38, 38);\n"
"color: rgb(242, 242, 242);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.lbLogoeMOC = QtWidgets.QLabel(self.centralwidget)
        self.lbLogoeMOC.setText("")
        self.lbLogoeMOC.setScaledContents(False)
        self.lbLogoeMOC.setAlignment(QtCore.Qt.AlignCenter)
        self.lbLogoeMOC.setObjectName("lbLogoeMOC")
        self.verticalLayout_3.addWidget(self.lbLogoeMOC)
        self.lb_current_media_time = QtWidgets.QLabel(self.centralwidget)
        self.lb_current_media_time.setObjectName("lb_current_media_time")
        self.verticalLayout_3.addWidget(self.lb_current_media_time)
        self.lbFocalSubject = QtWidgets.QLabel(self.centralwidget)
        self.lbFocalSubject.setObjectName("lbFocalSubject")
        self.verticalLayout_3.addWidget(self.lbFocalSubject)
        self.lbCurrentStates = QtWidgets.QLabel(self.centralwidget)
        self.lbCurrentStates.setObjectName("lbCurrentStates")
        self.verticalLayout_3.addWidget(self.lbCurrentStates)
        self.toolBox = QtWidgets.QToolBox(self.centralwidget)
        self.toolBox.setEnabled(True)
        self.toolBox.setObjectName("toolBox")
        self.page = QtWidgets.QWidget()
        self.page.setGeometry(QtCore.QRect(0, 0, 472, 412))
        self.page.setObjectName("page")
        self.toolBox.addItem(self.page, "")
        self.verticalLayout_3.addWidget(self.toolBox)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1054, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(242, 242, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.menubar.setPalette(palette)
        self.menubar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menubar.setMouseTracking(True)
        self.menubar.setFocusPolicy(QtCore.Qt.TabFocus)
        self.menubar.setStyleSheet(" QMenuBar::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }")
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menuHelp.setMouseTracking(True)
        self.menuHelp.setAutoFillBackground(False)
        self.menuHelp.setStyleSheet(" QMenu::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }")
        self.menuHelp.setObjectName("menuHelp")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menuFile.setMouseTracking(True)
        self.menuFile.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.menuFile.setAutoFillBackground(False)
        self.menuFile.setStyleSheet(" QMenu::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }\n"
"QMenu::item::disabled {\n"
"    color: rgb(140, 140, 140);\n"
" }")
        self.menuFile.setTearOffEnabled(False)
        self.menuFile.setProperty("tabletTracking", False)
        self.menuFile.setObjectName("menuFile")
        self.menuRecent_projects = QtWidgets.QMenu(self.menuFile)
        self.menuRecent_projects.setObjectName("menuRecent_projects")
        self.menuObservations = QtWidgets.QMenu(self.menubar)
        self.menuObservations.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menuObservations.setMouseTracking(True)
        self.menuObservations.setAutoFillBackground(False)
        self.menuObservations.setStyleSheet(" QMenu::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }\n"
"QMenu::item::disabled {\n"
"    color: rgb(140, 140, 140);\n"
" }")
        self.menuObservations.setObjectName("menuObservations")
        self.menuCreate_transitions_matrix = QtWidgets.QMenu(self.menuObservations)
        self.menuCreate_transitions_matrix.setEnabled(False)
        self.menuCreate_transitions_matrix.setObjectName("menuCreate_transitions_matrix")
        self.menuAnalyze = QtWidgets.QMenu(self.menubar)
        self.menuAnalyze.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menuAnalyze.setMouseTracking(True)
        self.menuAnalyze.setAutoFillBackground(False)
        self.menuAnalyze.setStyleSheet(" QMenu::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }\n"
"QMenu::item::disabled {\n"
"    color: rgb(140, 140, 140);\n"
" }")
        self.menuAnalyze.setObjectName("menuAnalyze")
        self.menuPlot_events = QtWidgets.QMenu(self.menuAnalyze)
        self.menuPlot_events.setEnabled(False)
        self.menuPlot_events.setObjectName("menuPlot_events")
        self.menuInter_rater_reliability = QtWidgets.QMenu(self.menuAnalyze)
        self.menuInter_rater_reliability.setEnabled(False)
        self.menuInter_rater_reliability.setObjectName("menuInter_rater_reliability")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.menuTools.setMouseTracking(True)
        self.menuTools.setAutoFillBackground(False)
        self.menuTools.setStyleSheet(" QMenu::item:selected{\n"
"  background-color: rgb(59, 64, 69);\n"
" }\n"
"QMenu::item::disabled {\n"
"    color: rgb(140, 140, 140);\n"
" }")
        self.menuTools.setObjectName("menuTools")
        self.menuTransitions_flow_diagram = QtWidgets.QMenu(self.menuTools)
        self.menuTransitions_flow_diagram.setObjectName("menuTransitions_flow_diagram")
        self.menu_coding_map_creator = QtWidgets.QMenu(self.menuTools)
        self.menu_coding_map_creator.setObjectName("menu_coding_map_creator")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setEnabled(True)
        self.toolBar.setToolTip("")
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.dwEthogram = QtWidgets.QDockWidget(MainWindow)
        self.dwEthogram.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"border-color: rgb(38, 38, 38);\n"
"\n"
"QDockWidget QTabBar {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}\n"
"\n"
"QDockWidget QTabBar::item {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}")
        self.dwEthogram.setFloating(False)
        self.dwEthogram.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwEthogram.setObjectName("dwEthogram")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.twEthogram = QtWidgets.QTableWidget(self.dockWidgetContents_3)
        self.twEthogram.setEnabled(True)
        self.twEthogram.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twEthogram.setStyleSheet("QTableWidget::item {\n"
"  selection-background-color: rgb(89, 89, 89);\n"
"  selection-color: rgb(242, 242, 242);\n"
"}\n"
"\n"
"QTableWidget::item:selected{\n"
"    selection-background-color: rgb(38, 38, 38);\n"
"    selection-color: rgb(242, 242, 242); \n"
"}\n"
"\n"
"QHeaderView::section\n"
"{\n"
"  background-color: rgb(89, 89, 89);\n"
"  color: rgb(242, 242, 242);\n"
"}")
        self.twEthogram.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twEthogram.setProperty("showDropIndicator", True)
        self.twEthogram.setAlternatingRowColors(False)
        self.twEthogram.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.twEthogram.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twEthogram.setShowGrid(True)
        self.twEthogram.setGridStyle(QtCore.Qt.SolidLine)
        self.twEthogram.setWordWrap(False)
        self.twEthogram.setObjectName("twEthogram")
        self.twEthogram.setColumnCount(5)
        self.twEthogram.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(4, item)
        self.verticalLayout_4.addWidget(self.twEthogram)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.dwEthogram.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dwEthogram)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setStyleSheet("QStatusBar::item {\n"
"   background-color: rgb(89, 89, 89);\n"
"    color: rgb(242, 242, 242);\n"
"}")
        self.statusbar.setSizeGripEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dwObservations = QtWidgets.QDockWidget(MainWindow)
        self.dwObservations.setFocusPolicy(QtCore.Qt.NoFocus)
        self.dwObservations.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"border-color: rgb(38, 38, 38);\n"
"\n"
"QDockWidget QTabBar {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}\n"
"\n"
"QDockWidget QTabBar::item {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}")
        self.dwObservations.setFloating(False)
        self.dwObservations.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwObservations.setObjectName("dwObservations")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.twEvents = QtWidgets.QTableWidget(self.dockWidgetContents_2)
        self.twEvents.setEnabled(True)
        self.twEvents.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twEvents.setStyleSheet("QTableWidget::item {\n"
"  selection-background-color: rgb(89, 89, 89);\n"
"  selection-color: rgb(242, 242, 242);\n"
"}\n"
"\n"
"QTableWidget::item:selected{\n"
"    selection-background-color: rgb(38, 38, 38);\n"
"    selection-color: rgb(242, 242, 242); \n"
"}\n"
"\n"
"QHeaderView::section\n"
"{\n"
"  background-color: rgb(89, 89, 89);\n"
"  color: rgb(242, 242, 242);\n"
"}")
        self.twEvents.setAutoScroll(False)
        self.twEvents.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twEvents.setTabKeyNavigation(False)
        self.twEvents.setProperty("showDropIndicator", True)
        self.twEvents.setDragDropOverwriteMode(False)
        self.twEvents.setAlternatingRowColors(False)
        self.twEvents.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.twEvents.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twEvents.setShowGrid(True)
        self.twEvents.setGridStyle(QtCore.Qt.SolidLine)
        self.twEvents.setWordWrap(True)
        self.twEvents.setObjectName("twEvents")
        self.twEvents.setColumnCount(0)
        self.twEvents.setRowCount(0)
        self.verticalLayout.addWidget(self.twEvents)
        self.verticalLayout_7.addLayout(self.verticalLayout)
        self.dwObservations.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dwObservations)
        self.dwSubjects = QtWidgets.QDockWidget(MainWindow)
        self.dwSubjects.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"border-color: rgb(38, 38, 38);\n"
"\n"
"QDockWidget QTabBar {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}\n"
"\n"
"QDockWidget QTabBar::item {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}")
        self.dwSubjects.setFloating(False)
        self.dwSubjects.setObjectName("dwSubjects")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.twSubjects = QtWidgets.QTableWidget(self.dockWidgetContents)
        self.twSubjects.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twSubjects.setStyleSheet("QTableWidget::item {\n"
"  selection-background-color: rgb(89, 89, 89);\n"
"  selection-color: rgb(242, 242, 242);\n"
"}\n"
"\n"
"QTableWidget::item:selected{\n"
"    selection-background-color: rgb(38, 38, 38);\n"
"    selection-color: rgb(242, 242, 242); \n"
"}\n"
"\n"
"QHeaderView::section\n"
"{\n"
"  background-color: rgb(89, 89, 89);\n"
"  color: rgb(242, 242, 242);\n"
"}")
        self.twSubjects.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twSubjects.setAlternatingRowColors(False)
        self.twSubjects.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twSubjects.setShowGrid(True)
        self.twSubjects.setGridStyle(QtCore.Qt.SolidLine)
        self.twSubjects.setWordWrap(False)
        self.twSubjects.setObjectName("twSubjects")
        self.twSubjects.setColumnCount(4)
        self.twSubjects.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(3, item)
        self.verticalLayout_2.addWidget(self.twSubjects)
        self.dwSubjects.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dwSubjects)
        self.dwObservationsGroup = QtWidgets.QDockWidget(MainWindow)
        self.dwObservationsGroup.setMaximumSize(QtCore.QSize(524287, 524287))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dwObservationsGroup.setWindowIcon(icon1)
        self.dwObservationsGroup.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"border-color: rgb(38, 38, 38);\n"
"\n"
"QDockWidget QTabBar {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}\n"
"\n"
"QDockWidget QTabBar::item {\n"
" background-color: rgb(89, 89, 89);\n"
" border-color: rgb(38, 38, 38);\n"
"}")
        self.dwObservationsGroup.setObjectName("dwObservationsGroup")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setEnabled(True)
        self.dockWidgetContents_5.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.dockWidgetContents_5.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.dockWidgetContents_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.dockWidgetContents_5.setAutoFillBackground(False)
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.dockWidgetContents_5)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.dockWidgetContents_6 = QtWidgets.QWidget(self.dockWidgetContents_5)
        self.dockWidgetContents_6.setStyleSheet("border-color:  rgb(242, 242, 242);")
        self.dockWidgetContents_6.setObjectName("dockWidgetContents_6")
        self.vl_events_group = QtWidgets.QVBoxLayout(self.dockWidgetContents_6)
        self.vl_events_group.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.vl_events_group.setObjectName("vl_events_group")
        self.events_group = QtWidgets.QVBoxLayout()
        self.events_group.setObjectName("events_group")
        self.vl_events_group.addLayout(self.events_group)
        self.verticalLayout_6.addWidget(self.dockWidgetContents_6)
        self.dwObservationsGroup.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dwObservationsGroup)
        self.actionDocumentation = QtWidgets.QAction(MainWindow)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionPause = QtWidgets.QAction(MainWindow)
        self.actionPause.setObjectName("actionPause")
        self.actionPlay = QtWidgets.QAction(MainWindow)
        self.actionPlay.setObjectName("actionPlay")
        self.actionOpen_video_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_video_file.setObjectName("actionOpen_video_file")
        self.actionReset = QtWidgets.QAction(MainWindow)
        self.actionReset.setObjectName("actionReset")
        self.actionFaster = QtWidgets.QAction(MainWindow)
        self.actionFaster.setEnabled(True)
        self.actionFaster.setObjectName("actionFaster")
        self.actionSlower = QtWidgets.QAction(MainWindow)
        self.actionSlower.setEnabled(True)
        self.actionSlower.setObjectName("actionSlower")
        self.actionJumpForward = QtWidgets.QAction(MainWindow)
        self.actionJumpForward.setObjectName("actionJumpForward")
        self.actionLoad_configuration = QtWidgets.QAction(MainWindow)
        self.actionLoad_configuration.setObjectName("actionLoad_configuration")
        self.actionDelete_selected_observations = QtWidgets.QAction(MainWindow)
        self.actionDelete_selected_observations.setEnabled(False)
        self.actionDelete_selected_observations.setObjectName("actionDelete_selected_observations")
        self.actionDelete_all_observations = QtWidgets.QAction(MainWindow)
        self.actionDelete_all_observations.setEnabled(False)
        self.actionDelete_all_observations.setObjectName("actionDelete_all_observations")
        self.actionSort_observations = QtWidgets.QAction(MainWindow)
        self.actionSort_observations.setObjectName("actionSort_observations")
        self.actionLoad_observations_file = QtWidgets.QAction(MainWindow)
        self.actionLoad_observations_file.setEnabled(False)
        self.actionLoad_observations_file.setObjectName("actionLoad_observations_file")
        self.actionSelect_observations = QtWidgets.QAction(MainWindow)
        self.actionSelect_observations.setEnabled(False)
        self.actionSelect_observations.setObjectName("actionSelect_observations")
        self.actionConfigure_states_and_events = QtWidgets.QAction(MainWindow)
        self.actionConfigure_states_and_events.setEnabled(False)
        self.actionConfigure_states_and_events.setObjectName("actionConfigure_states_and_events")
        self.actionEdit_event = QtWidgets.QAction(MainWindow)
        self.actionEdit_event.setObjectName("actionEdit_event")
        self.actionLoad_configuration_file = QtWidgets.QAction(MainWindow)
        self.actionLoad_configuration_file.setObjectName("actionLoad_configuration_file")
        self.actionMedia_file_information = QtWidgets.QAction(MainWindow)
        self.actionMedia_file_information.setObjectName("actionMedia_file_information")
        self.actionStart_live_observation = QtWidgets.QAction(MainWindow)
        self.actionStart_live_observation.setObjectName("actionStart_live_observation")
        self.actionNew_project = QtWidgets.QAction(MainWindow)
        self.actionNew_project.setObjectName("actionNew_project")
        self.actionTime_budget = QtWidgets.QAction(MainWindow)
        self.actionTime_budget.setEnabled(False)
        self.actionTime_budget.setObjectName("actionTime_budget")
        self.actionSave_project = QtWidgets.QAction(MainWindow)
        self.actionSave_project.setEnabled(False)
        self.actionSave_project.setObjectName("actionSave_project")
        self.actionOpen_project = QtWidgets.QAction(MainWindow)
        self.actionOpen_project.setObjectName("actionOpen_project")
        self.actionSet_offset = QtWidgets.QAction(MainWindow)
        self.actionSet_offset.setObjectName("actionSet_offset")
        self.actionEdit_project = QtWidgets.QAction(MainWindow)
        self.actionEdit_project.setEnabled(False)
        self.actionEdit_project.setObjectName("actionEdit_project")
        self.actionSave_project_as = QtWidgets.QAction(MainWindow)
        self.actionSave_project_as.setEnabled(False)
        self.actionSave_project_as.setObjectName("actionSave_project_as")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionNew_observation = QtWidgets.QAction(MainWindow)
        self.actionNew_observation.setEnabled(False)
        self.actionNew_observation.setObjectName("actionNew_observation")
        self.actionSave_observation = QtWidgets.QAction(MainWindow)
        self.actionSave_observation.setObjectName("actionSave_observation")
        self.actionClose_observation = QtWidgets.QAction(MainWindow)
        self.actionClose_observation.setEnabled(False)
        self.actionClose_observation.setObjectName("actionClose_observation")
        self.actionEdit_current_observation = QtWidgets.QAction(MainWindow)
        self.actionEdit_current_observation.setEnabled(False)
        self.actionEdit_current_observation.setObjectName("actionEdit_current_observation")
        self.actionOpen_observation_2 = QtWidgets.QAction(MainWindow)
        self.actionOpen_observation_2.setEnabled(False)
        self.actionOpen_observation_2.setVisible(False)
        self.actionOpen_observation_2.setObjectName("actionOpen_observation_2")
        self.actionAdd_event = QtWidgets.QAction(MainWindow)
        self.actionAdd_event.setEnabled(False)
        self.actionAdd_event.setObjectName("actionAdd_event")
        self.actionDeselectCurrentSubject = QtWidgets.QAction(MainWindow)
        self.actionDeselectCurrentSubject.setObjectName("actionDeselectCurrentSubject")
        self.actionNext = QtWidgets.QAction(MainWindow)
        self.actionNext.setIconVisibleInMenu(False)
        self.actionNext.setObjectName("actionNext")
        self.actionPrevious = QtWidgets.QAction(MainWindow)
        self.actionPrevious.setObjectName("actionPrevious")
        self.actionJumpTo = QtWidgets.QAction(MainWindow)
        self.actionJumpTo.setEnabled(True)
        self.actionJumpTo.setObjectName("actionJumpTo")
        self.actionJumpBackward = QtWidgets.QAction(MainWindow)
        self.actionJumpBackward.setObjectName("actionJumpBackward")
        self.actionEdit_observation = QtWidgets.QAction(MainWindow)
        self.actionEdit_observation.setEnabled(False)
        self.actionEdit_observation.setVisible(False)
        self.actionEdit_observation.setObjectName("actionEdit_observation")
        self.actionCheckUpdate = QtWidgets.QAction(MainWindow)
        self.actionCheckUpdate.setObjectName("actionCheckUpdate")
        self.actionExportEvents = QtWidgets.QAction(MainWindow)
        self.actionExportEvents.setEnabled(False)
        self.actionExportEvents.setObjectName("actionExportEvents")
        self.actionExportEventString = QtWidgets.QAction(MainWindow)
        self.actionExportEventString.setEnabled(False)
        self.actionExportEventString.setObjectName("actionExportEventString")
        self.actionClose_project = QtWidgets.QAction(MainWindow)
        self.actionClose_project.setEnabled(False)
        self.actionClose_project.setObjectName("actionClose_project")
        self.actionObservationsList = QtWidgets.QAction(MainWindow)
        self.actionObservationsList.setEnabled(False)
        self.actionObservationsList.setObjectName("actionObservationsList")
        self.actionNormalSpeed = QtWidgets.QAction(MainWindow)
        self.actionNormalSpeed.setObjectName("actionNormalSpeed")
        self.actionSnapshot = QtWidgets.QAction(MainWindow)
        self.actionSnapshot.setObjectName("actionSnapshot")
        self.actionFrame_by_frame = QtWidgets.QAction(MainWindow)
        self.actionFrame_by_frame.setCheckable(True)
        self.actionFrame_by_frame.setObjectName("actionFrame_by_frame")
        self.actionExportEventsSQL = QtWidgets.QAction(MainWindow)
        self.actionExportEventsSQL.setObjectName("actionExportEventsSQL")
        self.actionAggregatedEventsTabularFormat = QtWidgets.QAction(MainWindow)
        self.actionAggregatedEventsTabularFormat.setObjectName("actionAggregatedEventsTabularFormat")
        self.actionOpen_observation = QtWidgets.QAction(MainWindow)
        self.actionOpen_observation.setEnabled(False)
        self.actionOpen_observation.setObjectName("actionOpen_observation")
        self.actionExportEventTabular_ODS = QtWidgets.QAction(MainWindow)
        self.actionExportEventTabular_ODS.setObjectName("actionExportEventTabular_ODS")
        self.actionAaaa = QtWidgets.QAction(MainWindow)
        self.actionAaaa.setObjectName("actionAaaa")
        self.menuCreate_subtitles_2 = QtWidgets.QAction(MainWindow)
        self.menuCreate_subtitles_2.setEnabled(False)
        self.menuCreate_subtitles_2.setObjectName("menuCreate_subtitles_2")
        self.actionExportEventTabular_XLS = QtWidgets.QAction(MainWindow)
        self.actionExportEventTabular_XLS.setObjectName("actionExportEventTabular_XLS")
        self.actionUser_guide = QtWidgets.QAction(MainWindow)
        self.actionUser_guide.setObjectName("actionUser_guide")
        self.actionEdit_observation_2 = QtWidgets.QAction(MainWindow)
        self.actionEdit_observation_2.setEnabled(False)
        self.actionEdit_observation_2.setObjectName("actionEdit_observation_2")
        self.actionCheckStateEvents = QtWidgets.QAction(MainWindow)
        self.actionCheckStateEvents.setEnabled(False)
        self.actionCheckStateEvents.setObjectName("actionCheckStateEvents")
        self.actionRunEventOutside = QtWidgets.QAction(MainWindow)
        self.actionRunEventOutside.setObjectName("actionRunEventOutside")
        self.actionEdit_selected_events = QtWidgets.QAction(MainWindow)
        self.actionEdit_selected_events.setEnabled(False)
        self.actionEdit_selected_events.setObjectName("actionEdit_selected_events")
        self.actionShow_spectrogram = QtWidgets.QAction(MainWindow)
        self.actionShow_spectrogram.setEnabled(False)
        self.actionShow_spectrogram.setObjectName("actionShow_spectrogram")
        self.actionExport_events_as_Praat_TextGrid = QtWidgets.QAction(MainWindow)
        self.actionExport_events_as_Praat_TextGrid.setEnabled(False)
        self.actionExport_events_as_Praat_TextGrid.setObjectName("actionExport_events_as_Praat_TextGrid")
        self.actionExtract_events_from_media_files = QtWidgets.QAction(MainWindow)
        self.actionExtract_events_from_media_files.setEnabled(False)
        self.actionExtract_events_from_media_files.setObjectName("actionExtract_events_from_media_files")
        self.actionDistance = QtWidgets.QAction(MainWindow)
        self.actionDistance.setEnabled(False)
        self.actionDistance.setObjectName("actionDistance")
        self.actionFrame_forward = QtWidgets.QAction(MainWindow)
        self.actionFrame_forward.setObjectName("actionFrame_forward")
        self.actionFrame_backward = QtWidgets.QAction(MainWindow)
        self.actionFrame_backward.setObjectName("actionFrame_backward")
        self.actionFilterBehaviors = QtWidgets.QAction(MainWindow)
        self.actionFilterBehaviors.setObjectName("actionFilterBehaviors")
        self.actionShowAllBehaviors = QtWidgets.QAction(MainWindow)
        self.actionShowAllBehaviors.setObjectName("actionShowAllBehaviors")
        self.actionExport_aggregated_events = QtWidgets.QAction(MainWindow)
        self.actionExport_aggregated_events.setEnabled(False)
        self.actionExport_aggregated_events.setObjectName("actionExport_aggregated_events")
        self.actionCoding_pad = QtWidgets.QAction(MainWindow)
        self.actionCoding_pad.setEnabled(False)
        self.actionCoding_pad.setObjectName("actionCoding_pad")
        self.actionTime_budget_by_behaviors_category = QtWidgets.QAction(MainWindow)
        self.actionTime_budget_by_behaviors_category.setEnabled(False)
        self.actionTime_budget_by_behaviors_category.setObjectName("actionTime_budget_by_behaviors_category")
        self.actionExport_events_as_SDIS_file = QtWidgets.QAction(MainWindow)
        self.actionExport_events_as_SDIS_file.setObjectName("actionExport_events_as_SDIS_file")
        self.actionRecode_resize_video = QtWidgets.QAction(MainWindow)
        self.actionRecode_resize_video.setObjectName("actionRecode_resize_video")
        self.actionMedia_file_information_2 = QtWidgets.QAction(MainWindow)
        self.actionMedia_file_information_2.setObjectName("actionMedia_file_information_2")
        self.actionCreate_transitions_flow_diagram = QtWidgets.QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram.setObjectName("actionCreate_transitions_flow_diagram")
        self.actionCreate_transitions_flow_diagram_2 = QtWidgets.QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram_2.setObjectName("actionCreate_transitions_flow_diagram_2")
        self.actionAll_transitions = QtWidgets.QAction(MainWindow)
        self.actionAll_transitions.setObjectName("actionAll_transitions")
        self.actionNumber_of_transitions = QtWidgets.QAction(MainWindow)
        self.actionNumber_of_transitions.setObjectName("actionNumber_of_transitions")
        self.actionFrequencies_of_transitions_after_behaviors = QtWidgets.QAction(MainWindow)
        self.actionFrequencies_of_transitions_after_behaviors.setObjectName("actionFrequencies_of_transitions_after_behaviors")
        self.actionFind_replace_events = QtWidgets.QAction(MainWindow)
        self.actionFind_replace_events.setEnabled(False)
        self.actionFind_replace_events.setObjectName("actionFind_replace_events")
        self.actionFind_events = QtWidgets.QAction(MainWindow)
        self.actionFind_events.setEnabled(False)
        self.actionFind_events.setObjectName("actionFind_events")
        self.actionHow_to_cite_BORIS = QtWidgets.QAction(MainWindow)
        self.actionHow_to_cite_BORIS.setObjectName("actionHow_to_cite_BORIS")
        self.actionZoom1_1_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_1.setCheckable(True)
        self.actionZoom1_1_1.setObjectName("actionZoom1_1_1")
        self.actionZoom1_2_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_2_1.setCheckable(True)
        self.actionZoom1_2_1.setObjectName("actionZoom1_2_1")
        self.actionZoom1_1_2 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_2.setCheckable(True)
        self.actionZoom1_1_2.setObjectName("actionZoom1_1_2")
        self.actionZoom1_1_4 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_4.setCheckable(True)
        self.actionZoom1_1_4.setObjectName("actionZoom1_1_4")
        self.actionZoom1_fitwindow = QtWidgets.QAction(MainWindow)
        self.actionZoom1_fitwindow.setCheckable(True)
        self.actionZoom1_fitwindow.setObjectName("actionZoom1_fitwindow")
        self.actionZoom2_fitwindow = QtWidgets.QAction(MainWindow)
        self.actionZoom2_fitwindow.setCheckable(True)
        self.actionZoom2_fitwindow.setObjectName("actionZoom2_fitwindow")
        self.actionZoom2_1_4 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_4.setCheckable(True)
        self.actionZoom2_1_4.setObjectName("actionZoom2_1_4")
        self.actionZoom2_1_2 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_2.setCheckable(True)
        self.actionZoom2_1_2.setObjectName("actionZoom2_1_2")
        self.actionZoom2_1_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_1.setCheckable(True)
        self.actionZoom2_1_1.setObjectName("actionZoom2_1_1")
        self.actionZoom2_2_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_2_1.setCheckable(True)
        self.actionZoom2_2_1.setObjectName("actionZoom2_2_1")
        self.actionFilterSubjects = QtWidgets.QAction(MainWindow)
        self.actionFilterSubjects.setObjectName("actionFilterSubjects")
        self.actionShowAllSubjects = QtWidgets.QAction(MainWindow)
        self.actionShowAllSubjects.setObjectName("actionShowAllSubjects")
        self.actionSend_project = QtWidgets.QAction(MainWindow)
        self.actionSend_project.setEnabled(False)
        self.actionSend_project.setObjectName("actionSend_project")
        self.actionViewBehavior = QtWidgets.QAction(MainWindow)
        self.actionViewBehavior.setObjectName("actionViewBehavior")
        self.actionBehaviors_coding_map = QtWidgets.QAction(MainWindow)
        self.actionBehaviors_coding_map.setEnabled(False)
        self.actionBehaviors_coding_map.setObjectName("actionBehaviors_coding_map")
        self.action_create_behaviors_coding_map = QtWidgets.QAction(MainWindow)
        self.action_create_behaviors_coding_map.setObjectName("action_create_behaviors_coding_map")
        self.action_create_modifiers_coding_map = QtWidgets.QAction(MainWindow)
        self.action_create_modifiers_coding_map.setObjectName("action_create_modifiers_coding_map")
        self.actionPlot_events1 = QtWidgets.QAction(MainWindow)
        self.actionPlot_events1.setObjectName("actionPlot_events1")
        self.actionPlot_events2 = QtWidgets.QAction(MainWindow)
        self.actionPlot_events2.setObjectName("actionPlot_events2")
        self.actionCohen_s_kappa = QtWidgets.QAction(MainWindow)
        self.actionCohen_s_kappa.setObjectName("actionCohen_s_kappa")
        self.actionTime_budget_report = QtWidgets.QAction(MainWindow)
        self.actionTime_budget_report.setEnabled(False)
        self.actionTime_budget_report.setObjectName("actionTime_budget_report")
        self.actionCheckStateEventsSingleObs = QtWidgets.QAction(MainWindow)
        self.actionCheckStateEventsSingleObs.setObjectName("actionCheckStateEventsSingleObs")
        self.actionSubjects_pad = QtWidgets.QAction(MainWindow)
        self.actionSubjects_pad.setEnabled(False)
        self.actionSubjects_pad.setObjectName("actionSubjects_pad")
        self.actionShow_data_files = QtWidgets.QAction(MainWindow)
        self.actionShow_data_files.setEnabled(False)
        self.actionShow_data_files.setObjectName("actionShow_data_files")
        self.actionConverters_manager = QtWidgets.QAction(MainWindow)
        self.actionConverters_manager.setObjectName("actionConverters_manager")
        self.actionView_observation = QtWidgets.QAction(MainWindow)
        self.actionView_observation.setEnabled(False)
        self.actionView_observation.setObjectName("actionView_observation")
        self.actionRemove_path_from_media_files = QtWidgets.QAction(MainWindow)
        self.actionRemove_path_from_media_files.setEnabled(False)
        self.actionRemove_path_from_media_files.setObjectName("actionRemove_path_from_media_files")
        self.actionCheck_project = QtWidgets.QAction(MainWindow)
        self.actionCheck_project.setEnabled(False)
        self.actionCheck_project.setObjectName("actionCheck_project")
        self.actionBehavior_bar_plot = QtWidgets.QAction(MainWindow)
        self.actionBehavior_bar_plot.setObjectName("actionBehavior_bar_plot")
        self.action_obs_list = QtWidgets.QAction(MainWindow)
        self.action_obs_list.setObjectName("action_obs_list")
        self.actionTest = QtWidgets.QAction(MainWindow)
        self.actionTest.setObjectName("actionTest")
        self.actionTest_stb2 = QtWidgets.QAction(MainWindow)
        self.actionTest_stb2.setEnabled(False)
        self.actionTest_stb2.setObjectName("actionTest_stb2")
        self.actionClose_unpaired_events = QtWidgets.QAction(MainWindow)
        self.actionClose_unpaired_events.setEnabled(False)
        self.actionClose_unpaired_events.setObjectName("actionClose_unpaired_events")
        self.actionRotate_video = QtWidgets.QAction(MainWindow)
        self.actionRotate_video.setObjectName("actionRotate_video")
        self.actionServidor_download = QtWidgets.QAction(MainWindow)
        self.actionServidor_download.setEnabled(False)
        self.actionServidor_download.setObjectName("actionServidor_download")
        self.actionOpen_server = QtWidgets.QAction(MainWindow)
        self.actionOpen_server.setEnabled(True)
        self.actionOpen_server.setObjectName("actionOpen_server")
        self.actionStop_observation = QtWidgets.QAction(MainWindow)
        self.actionStop_observation.setCheckable(False)
        self.actionStop_observation.setObjectName("actionStop_observation")
        self.actionEnter_colaboration = QtWidgets.QAction(MainWindow)
        self.actionEnter_colaboration.setObjectName("actionEnter_colaboration")
        self.menuHelp.addAction(self.actionAbout)
        self.menuRecent_projects.addSeparator()
        self.menuFile.addAction(self.actionNew_project)
        self.menuFile.addAction(self.actionOpen_project)
        self.menuFile.addAction(self.menuRecent_projects.menuAction())
        self.menuFile.addAction(self.actionEdit_project)
        self.menuFile.addAction(self.actionCheck_project)
        self.menuFile.addAction(self.actionSave_project)
        self.menuFile.addAction(self.actionSave_project_as)
        self.menuFile.addAction(self.actionClose_project)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionRemove_path_from_media_files)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpen_server)
        self.menuFile.addAction(self.actionEnter_colaboration)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPreferences)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuCreate_transitions_matrix.addAction(self.actionAll_transitions)
        self.menuCreate_transitions_matrix.addAction(self.actionFrequencies_of_transitions_after_behaviors)
        self.menuCreate_transitions_matrix.addAction(self.actionNumber_of_transitions)
        self.menuObservations.addAction(self.actionNew_observation)
        self.menuObservations.addAction(self.actionOpen_observation)
        self.menuObservations.addAction(self.actionView_observation)
        self.menuObservations.addAction(self.actionEdit_observation_2)
        self.menuObservations.addAction(self.actionObservationsList)
        self.menuObservations.addAction(self.actionOpen_observation_2)
        self.menuObservations.addAction(self.actionEdit_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionClose_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionLoad_observations_file)
        self.menuObservations.addAction(self.actionClose_unpaired_events)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionAdd_event)
        self.menuObservations.addAction(self.actionEdit_selected_events)
        self.menuObservations.addAction(self.actionFind_events)
        self.menuObservations.addAction(self.actionFind_replace_events)
        self.menuObservations.addAction(self.actionCheckStateEvents)
        self.menuObservations.addAction(self.actionSelect_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionDelete_selected_observations)
        self.menuObservations.addAction(self.actionDelete_all_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionExportEvents)
        self.menuObservations.addAction(self.actionExport_aggregated_events)
        self.menuObservations.addAction(self.actionExportEventString)
        self.menuObservations.addAction(self.actionExport_events_as_Praat_TextGrid)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_subtitles_2)
        self.menuObservations.addAction(self.actionExtract_events_from_media_files)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_transitions_matrix.menuAction())
        self.menuPlot_events.addAction(self.actionPlot_events1)
        self.menuPlot_events.addAction(self.actionPlot_events2)
        self.menuPlot_events.addAction(self.actionBehavior_bar_plot)
        self.menuPlot_events.addAction(self.actionTest)
        self.menuInter_rater_reliability.addAction(self.actionCohen_s_kappa)
        self.menuAnalyze.addAction(self.actionTime_budget)
        self.menuAnalyze.addAction(self.actionTime_budget_report)
        self.menuAnalyze.addAction(self.actionTime_budget_by_behaviors_category)
        self.menuAnalyze.addAction(self.menuPlot_events.menuAction())
        self.menuAnalyze.addAction(self.menuInter_rater_reliability.menuAction())
        self.menuAnalyze.addAction(self.actionTest_stb2)
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram)
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram_2)
        self.menu_coding_map_creator.addAction(self.action_create_behaviors_coding_map)
        self.menu_coding_map_creator.addAction(self.action_create_modifiers_coding_map)
        self.menuTools.addAction(self.actionShow_spectrogram)
        self.menuTools.addAction(self.actionShow_data_files)
        self.menuTools.addAction(self.actionDistance)
        self.menuTools.addAction(self.actionBehaviors_coding_map)
        self.menuTools.addAction(self.actionCoding_pad)
        self.menuTools.addAction(self.actionSubjects_pad)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.menu_coding_map_creator.menuAction())
        self.menuTools.addAction(self.actionRecode_resize_video)
        self.menuTools.addAction(self.actionRotate_video)
        self.menuTools.addAction(self.actionMedia_file_information_2)
        self.menuTools.addAction(self.menuTransitions_flow_diagram.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuObservations.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAnalyze.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.action_obs_list)
        self.toolBar.addAction(self.actionPlay)
        self.toolBar.addAction(self.actionPause)
        self.toolBar.addAction(self.actionReset)
        self.toolBar.addAction(self.actionStop_observation)
        self.toolBar.addAction(self.actionJumpBackward)
        self.toolBar.addAction(self.actionJumpForward)
        self.toolBar.addAction(self.actionNormalSpeed)
        self.toolBar.addAction(self.actionFaster)
        self.toolBar.addAction(self.actionSlower)
        self.toolBar.addAction(self.actionPrevious)
        self.toolBar.addAction(self.actionNext)
        self.toolBar.addAction(self.actionSnapshot)
        self.toolBar.addAction(self.actionFrame_by_frame)
        self.toolBar.addAction(self.actionFrame_backward)
        self.toolBar.addAction(self.actionFrame_forward)

        self.retranslateUi(MainWindow)
        self.toolBox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "eMOC"))
        self.lb_current_media_time.setText(_translate("MainWindow", "TextLabel"))
        self.lbFocalSubject.setText(_translate("MainWindow", "lbFocalSubject"))
        self.lbCurrentStates.setText(_translate("MainWindow", "lbCurrentStates"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("MainWindow", "Page"))
        self.menuHelp.setTitle(_translate("MainWindow", "Ajuda"))
        self.menuFile.setTitle(_translate("MainWindow", "Arquivos"))
        self.menuRecent_projects.setTitle(_translate("MainWindow", "Projetos recentes"))
        self.menuObservations.setTitle(_translate("MainWindow", "Observações"))
        self.menuCreate_transitions_matrix.setTitle(_translate("MainWindow", "Criar matriz de transições"))
        self.menuAnalyze.setTitle(_translate("MainWindow", "Análise"))
        self.menuPlot_events.setTitle(_translate("MainWindow", "Eventos de plotagem"))
        self.menuInter_rater_reliability.setTitle(_translate("MainWindow", "Confiabilidade entre avaliadores"))
        self.menuTools.setTitle(_translate("MainWindow", "Ferramentas"))
        self.menuTransitions_flow_diagram.setTitle(_translate("MainWindow", "Diagrama de fluxo de transições"))
        self.menu_coding_map_creator.setTitle(_translate("MainWindow", "Crie um mapa de codificação"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.dwEthogram.setWindowTitle(_translate("MainWindow", "Ethogram"))
        item = self.twEthogram.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Tipo"))
        item = self.twEthogram.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Atalho"))
        item = self.twEthogram.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Observação"))
        item = self.twEthogram.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Barreiras"))
        item = self.twEthogram.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Modificadores"))
        self.dwObservations.setWindowTitle(_translate("MainWindow", "Eventos"))
        self.dwSubjects.setWindowTitle(_translate("MainWindow", "Sujeitos"))
        item = self.twSubjects.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Chave"))
        item = self.twSubjects.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Nome"))
        item = self.twSubjects.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Descrição"))
        item = self.twSubjects.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Estado atual(s)"))
        self.dwObservationsGroup.setWindowTitle(_translate("MainWindow", "Eventos do Grupo"))
        self.actionDocumentation.setText(_translate("MainWindow", "Documentation"))
        self.actionAbout.setText(_translate("MainWindow", "Sobre"))
        self.actionQuit.setText(_translate("MainWindow", "Sair"))
        self.actionPause.setText(_translate("MainWindow", "Pause"))
        self.actionPause.setToolTip(_translate("MainWindow", "Pause"))
        self.actionPlay.setText(_translate("MainWindow", "Play"))
        self.actionOpen_video_file.setText(_translate("MainWindow", "Open media file"))
        self.actionReset.setText(_translate("MainWindow", "Reset"))
        self.actionFaster.setText(_translate("MainWindow", "Faster"))
        self.actionSlower.setText(_translate("MainWindow", "Slower"))
        self.actionJumpForward.setText(_translate("MainWindow", "Jump forward"))
        self.actionJumpForward.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.actionLoad_configuration.setText(_translate("MainWindow", "Load configuration"))
        self.actionDelete_selected_observations.setText(_translate("MainWindow", "Deletar eventos selecionados"))
        self.actionDelete_all_observations.setText(_translate("MainWindow", "Deletar todos os eventos"))
        self.actionSort_observations.setText(_translate("MainWindow", "Sort events"))
        self.actionLoad_observations_file.setText(_translate("MainWindow", "Observações de importação"))
        self.actionSelect_observations.setText(_translate("MainWindow", "Selecionar eventos do intervalo"))
        self.actionConfigure_states_and_events.setText(_translate("MainWindow", "Configure states and events"))
        self.actionEdit_event.setText(_translate("MainWindow", "Edit event"))
        self.actionLoad_configuration_file.setText(_translate("MainWindow", "Load state and events configuration file"))
        self.actionMedia_file_information.setText(_translate("MainWindow", "Media file information"))
        self.actionStart_live_observation.setText(_translate("MainWindow", "Start observation without media file"))
        self.actionNew_project.setText(_translate("MainWindow", "Novo projeto"))
        self.actionTime_budget.setText(_translate("MainWindow", "Orçamento de tempo"))
        self.actionSave_project.setText(_translate("MainWindow", "Salvar"))
        self.actionSave_project.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionOpen_project.setText(_translate("MainWindow", "Abrir projeto"))
        self.actionSet_offset.setText(_translate("MainWindow", "Set time offset"))
        self.actionEdit_project.setText(_translate("MainWindow", "Editar projeto"))
        self.actionSave_project_as.setText(_translate("MainWindow", "Salvar como..."))
        self.actionPreferences.setText(_translate("MainWindow", "Configurações"))
        self.actionNew_observation.setText(_translate("MainWindow", "Nova observação"))
        self.actionNew_observation.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave_observation.setText(_translate("MainWindow", "Save current observation"))
        self.actionClose_observation.setText(_translate("MainWindow", "Observação de perto "))
        self.actionClose_observation.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionEdit_current_observation.setText(_translate("MainWindow", "Edit current observation"))
        self.actionOpen_observation_2.setText(_translate("MainWindow", "Open observation"))
        self.actionAdd_event.setText(_translate("MainWindow", "Adicionar evento"))
        self.actionAdd_event.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionDeselectCurrentSubject.setText(_translate("MainWindow", "Deselect current subject"))
        self.actionNext.setText(_translate("MainWindow", "Next"))
        self.actionNext.setToolTip(_translate("MainWindow", "Next media file"))
        self.actionPrevious.setText(_translate("MainWindow", "Previous"))
        self.actionPrevious.setToolTip(_translate("MainWindow", "Previous media file"))
        self.actionJumpTo.setText(_translate("MainWindow", "Jump to specific time"))
        self.actionJumpBackward.setText(_translate("MainWindow", "Jump backward"))
        self.actionJumpBackward.setToolTip(_translate("MainWindow", "Jump backward"))
        self.actionJumpBackward.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.actionEdit_observation.setText(_translate("MainWindow", "Edit observation"))
        self.actionCheckUpdate.setText(_translate("MainWindow", "Check for updates and news"))
        self.actionExportEvents.setText(_translate("MainWindow", "Exportar eventos"))
        self.actionExportEventString.setText(_translate("MainWindow", "Exportar eventos como sequências comportamentais"))
        self.actionClose_project.setText(_translate("MainWindow", "Fechar"))
        self.actionObservationsList.setText(_translate("MainWindow", "Lista de observações"))
        self.actionObservationsList.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionNormalSpeed.setText(_translate("MainWindow", "Normal speed"))
        self.actionSnapshot.setText(_translate("MainWindow", "Snapshot"))
        self.actionFrame_by_frame.setText(_translate("MainWindow", "Frame by frame"))
        self.actionExportEventsSQL.setText(_translate("MainWindow", "Structured Query Language (SQL)"))
        self.actionAggregatedEventsTabularFormat.setText(_translate("MainWindow", "Tab Separated Values (tsv)"))
        self.actionOpen_observation.setText(_translate("MainWindow", "Começar observação"))
        self.actionOpen_observation.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionExportEventTabular_ODS.setText(_translate("MainWindow", "Open Document Spreadsheet (ods)"))
        self.actionAaaa.setText(_translate("MainWindow", "aaaa"))
        self.menuCreate_subtitles_2.setText(_translate("MainWindow", "Criar subtitulos"))
        self.actionExportEventTabular_XLS.setText(_translate("MainWindow", "Microsoft Excel format (xls)"))
        self.actionUser_guide.setText(_translate("MainWindow", "User guide"))
        self.actionEdit_observation_2.setText(_translate("MainWindow", "Editar observação"))
        self.actionEdit_observation_2.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionCheckStateEvents.setText(_translate("MainWindow", "Verificar estados dos eventos"))
        self.actionRunEventOutside.setText(_translate("MainWindow", "Run external program with selected event(s)"))
        self.actionEdit_selected_events.setText(_translate("MainWindow", "Editar evento(s) selecionado(s)"))
        self.actionShow_spectrogram.setText(_translate("MainWindow", "Mostrar espectrograma"))
        self.actionExport_events_as_Praat_TextGrid.setText(_translate("MainWindow", "Exportar eventos como Praat TextGrid"))
        self.actionExtract_events_from_media_files.setText(_translate("MainWindow", "Extrair seqüências de arquivos de mídia"))
        self.actionDistance.setText(_translate("MainWindow", "Medição geométrica"))
        self.actionFrame_forward.setText(_translate("MainWindow", "Frame forward"))
        self.actionFrame_backward.setText(_translate("MainWindow", "frame backward"))
        self.actionFilterBehaviors.setText(_translate("MainWindow", "Filter behaviors"))
        self.actionShowAllBehaviors.setText(_translate("MainWindow", "Show all behaviors"))
        self.actionShowAllBehaviors.setToolTip(_translate("MainWindow", "Show all behaviors"))
        self.actionExport_aggregated_events.setText(_translate("MainWindow", "Exportar eventos agregados"))
        self.actionCoding_pad.setText(_translate("MainWindow", "Bloco de codificação"))
        self.actionTime_budget_by_behaviors_category.setText(_translate("MainWindow", "Orçamento de tempo por categoria comportamental"))
        self.actionExport_events_as_SDIS_file.setText(_translate("MainWindow", "Export events as SDIS file"))
        self.actionRecode_resize_video.setText(_translate("MainWindow", "Recodificar/redimensionar vídeo"))
        self.actionMedia_file_information_2.setText(_translate("MainWindow", "Informação arquivo de mídia "))
        self.actionCreate_transitions_flow_diagram.setText(_translate("MainWindow", "Criar script DOT de transições"))
        self.actionCreate_transitions_flow_diagram_2.setText(_translate("MainWindow", "Criar diagrama de fluxo de transições"))
        self.actionAll_transitions.setText(_translate("MainWindow", "Freqüências de transições"))
        self.actionNumber_of_transitions.setText(_translate("MainWindow", "Número de transições"))
        self.actionFrequencies_of_transitions_after_behaviors.setText(_translate("MainWindow", "Freqüências de transições após comportamentos"))
        self.actionFind_replace_events.setText(_translate("MainWindow", "Encontrar/substituir eventos"))
        self.actionFind_events.setText(_translate("MainWindow", "Encontrar eventos"))
        self.actionFind_events.setToolTip(_translate("MainWindow", "Find"))
        self.actionHow_to_cite_BORIS.setText(_translate("MainWindow", "How to cite BORIS"))
        self.actionZoom1_1_1.setText(_translate("MainWindow", "1:1 Original"))
        self.actionZoom1_2_1.setText(_translate("MainWindow", "2:1 Double"))
        self.actionZoom1_1_2.setText(_translate("MainWindow", "1:2 Half"))
        self.actionZoom1_1_4.setText(_translate("MainWindow", "1:4 Quarter"))
        self.actionZoom1_fitwindow.setText(_translate("MainWindow", "Fit to window"))
        self.actionZoom2_fitwindow.setText(_translate("MainWindow", "Fit to window"))
        self.actionZoom2_1_4.setText(_translate("MainWindow", "1:4 Quarter"))
        self.actionZoom2_1_2.setText(_translate("MainWindow", "1:2 Half"))
        self.actionZoom2_1_1.setText(_translate("MainWindow", "1:1 Original"))
        self.actionZoom2_2_1.setText(_translate("MainWindow", "2:1 Double"))
        self.actionFilterSubjects.setText(_translate("MainWindow", "Filter subjects"))
        self.actionFilterSubjects.setToolTip(_translate("MainWindow", "Filter subjects"))
        self.actionShowAllSubjects.setText(_translate("MainWindow", "Show all subjects"))
        self.actionShowAllSubjects.setToolTip(_translate("MainWindow", "Show all subjects"))
        self.actionSend_project.setText(_translate("MainWindow", "Enviar observação para outro eMOC"))
        self.actionViewBehavior.setText(_translate("MainWindow", "View behavior"))
        self.actionViewBehavior.setToolTip(_translate("MainWindow", "View behavior"))
        self.actionBehaviors_coding_map.setText(_translate("MainWindow", "Mapa de codificação de comportamentos"))
        self.action_create_behaviors_coding_map.setText(_translate("MainWindow", "para comportamentos"))
        self.action_create_modifiers_coding_map.setText(_translate("MainWindow", "para modificadores"))
        self.actionPlot_events1.setText(_translate("MainWindow", "Eventos de plotagem (compatibilidade versões anteriores)"))
        self.actionPlot_events2.setText(_translate("MainWindow", "Eventos de plotagem "))
        self.actionCohen_s_kappa.setText(_translate("MainWindow", "Kappa de Cohen"))
        self.actionTime_budget_report.setText(_translate("MainWindow", "Orçamento de tempo sintético"))
        self.actionCheckStateEventsSingleObs.setText(_translate("MainWindow", "Check state events"))
        self.actionSubjects_pad.setText(_translate("MainWindow", "Items de assuntos"))
        self.actionShow_data_files.setText(_translate("MainWindow", "Mostrar arquivos de dados"))
        self.actionConverters_manager.setText(_translate("MainWindow", "Time converters manager"))
        self.actionView_observation.setText(_translate("MainWindow", "Visualizar observação"))
        self.actionRemove_path_from_media_files.setText(_translate("MainWindow", "Remover caminho dos arquivos"))
        self.actionCheck_project.setText(_translate("MainWindow", "Verifique a integridade do projeto"))
        self.actionBehavior_bar_plot.setText(_translate("MainWindow", "Gráficos de comportamentos"))
        self.action_obs_list.setText(_translate("MainWindow", "Obs list"))
        self.action_obs_list.setToolTip(_translate("MainWindow", "Observations list"))
        self.actionTest.setText(_translate("MainWindow", "teste"))
        self.actionTest_stb2.setText(_translate("MainWindow", "teste stb2"))
        self.actionClose_unpaired_events.setText(_translate("MainWindow", "Corrigir eventos não pareados"))
        self.actionClose_unpaired_events.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionRotate_video.setText(_translate("MainWindow", "Rodar vídeo"))
        self.actionServidor_download.setText(_translate("MainWindow", "Servidor download observação(ões)"))
        self.actionOpen_server.setText(_translate("MainWindow", "Abrir Servidor"))
        self.actionStop_observation.setText(_translate("MainWindow", "Stop observation"))
        self.actionStop_observation.setToolTip(_translate("MainWindow", "Stop"))
        self.actionEnter_colaboration.setText(_translate("MainWindow", "Entrar na observação"))

